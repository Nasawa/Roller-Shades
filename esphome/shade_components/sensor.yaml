sensor:
  - platform: rotary_encoder
    id: blinds_encoder
    name: "Encoder"
    pin_a: D7
    pin_b: D8
    publish_initial_value: true
    filters:
      - debounce:
          milliseconds: 10
    on_value:
      then:
        - lambda: |-
            id(last_encoder_update) = millis();
            id(motor_state).publish_state(id(motor_state_ok));
        - if:
            condition:
              lambda: "return id(override_encoder);"
            then:
              - sensor.rotary_encoder.set_value:
                  id: blinds_encoder
                  value: 0
              - logger.log: "Encoder is ignored, reset to 0"
            else:
              - logger.log:
                  format: "Encoder state: %f"
                  args: ["id(blinds_encoder).state"]
              - number.set:
                  id: current_encoder_percent
                  value: !lambda |-
                    int position = (id(blinds_encoder).state - id(min_encoder_value).state) * 100 / (id(max_encoder_value).state - id(min_encoder_value).state);
                    return position;

  - platform: template
    name: "Current Encoder Percent"
    id: current_encoder_percent_sensor
    lambda: |-
      return id(current_encoder_percent).state;

  - platform: template
    name: "Open Duration"
    id: open_duration_number_sensor
    unit_of_measurement: "seconds"
    lambda: |-
      return id(open_duration_number).state;

  - platform: template
    name: "Close Duration"
    id: close_duration_number_sensor
    unit_of_measurement: "seconds"
    lambda: |-
      return id(close_duration_number).state;

  - platform: template
    name: "Motor State"
    id: motor_state
    lambda: 'return id(motor_state_ok);'