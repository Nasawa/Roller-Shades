number:
  - platform: template
    id: max_encoder_value
    name: "Max Encoder Value"
    step: 1
    mode: BOX
    min_value: 0
    max_value: 1000
    initial_value: 260
    restore_value: true
    optimistic: true
    on_value:
      then:
        - number.set:
            id: current_encoder_percent
            value: !lambda |-
              int position = (id(blinds_encoder).state - id(min_encoder_value).state) * 100 / (id(max_encoder_value).state - id(min_encoder_value).state);
              return position;

  - platform: template
    id: min_encoder_value
    name: "Min Encoder Value"
    step: 1
    mode: BOX
    min_value: 0
    max_value: 1000
    initial_value: 0
    restore_value: true
    optimistic: true
    on_value:
      then:
        - number.set:
            id: current_encoder_percent
            value: !lambda |-
              int position = (id(blinds_encoder).state - id(min_encoder_value).state) * 100 / (id(max_encoder_value).state - id(min_encoder_value).state);
              return position;

  - platform: template
    id: current_encoder_percent
    name: "Current Encoder Percent"
    step: 1
    min_value: 0
    max_value: 100
    restore_value: true
    initial_value: 0
    optimistic: true

  - platform: template
    id: error_delay
    name: "Error Delay (ms)"
    step: 1
    mode: BOX
    min_value: 0
    max_value: 100000
    restore_value: true
    initial_value: 500
    optimistic: true

  - platform: template
    id: motor_speed
    name: "Motor Speed"
    min_value: 0
    max_value: 100
    restore_value: true
    initial_value: 100
    mode: SLIDER
    step: 1
    optimistic: true
    # set_action:
    #   - lambda: |-
    #       id(motor_speed_pwm).set_level(x / 100.0);

  - platform: template
    id: open_duration_number
    name: "Open Duration"
    min_value: 0
    max_value: 300  # Adjust max value as needed
    restore_value: true
    step: 1
    mode: BOX
    optimistic: true
    unit_of_measurement: "seconds"
    # set_action:
    #   - lambda: |-
    #       return open_duration / 1000;
    # lambda: |-
    #   return id(open_duration);
  
  - platform: template
    id: close_duration_number
    name: "Close Duration"
    min_value: 0
    max_value: 300  # Adjust max value as needed
    restore_value: true
    step: 1
    mode: BOX
    optimistic: true
    unit_of_measurement: "seconds"