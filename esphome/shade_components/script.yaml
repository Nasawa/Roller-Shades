script:
  - id: motor_up
    then:
      - globals.set:
          id: is_running
          value: "true"
      - lambda: |-
          id(last_encoder_update) = millis();
      - output.turn_off: motor_direction_down
      - script.execute: motor_start
      - output.turn_on: motor_direction_up
      - wait_until:
          lambda: >-
            if (id(override_encoder)) {
              return !id(is_running);  // If override_encoder is true, wait until is_running is false
            } else {
              // Otherwise, wait until it hits the target or is_running is false
              return id(current_encoder_percent).state >= (id(target_position) - id(motor_offset)) || !id(is_running);
            }
      - script.execute: motor_stop

  - id: motor_down
    then:
      - globals.set:
          id: is_running
          value: "true"
      - lambda: |-
          id(last_encoder_update) = millis();
      - output.turn_off: motor_direction_up
      - script.execute: motor_start
      - output.turn_on: motor_direction_down
      - wait_until:
          lambda: >-
            if (id(override_encoder)) {
              return !id(is_running);  // If override_encoder is true, wait until is_running is false
            } else {
              // Otherwise, wait until it hits the target or is_running is false
              return id(current_encoder_percent).state <= (id(target_position) + id(motor_offset)) || !id(is_running);
            }
      - script.execute: motor_stop

  - id: motor_stop
    then:
      - output.turn_off: motor_direction_up
      - output.turn_off: motor_direction_down
      - output.set_level:
          id: motor_enable
          level: 0
      - logger.log: "Stopping motor"
      - globals.set:
          id: target_position
          value: !lambda return id(current_encoder_percent).state;
      - globals.set:
          id: is_running
          value: "false"
      - lambda: |-
          if (id(movement_start_time) != 0) {  // Ensure start time was recorded
            int duration = millis() - id(movement_start_time);
            if (id(target_position) == 100) {  // Shade opened fully
              auto call = id(open_duration_number).make_call();
              call.set_value(duration / 1000);
              call.perform();
            } else if (id(target_position) == 0) {  // Shade closed fully
              auto call = id(close_duration_number).make_call();
              call.set_value(duration / 1000);
              call.perform();
            }
            id(movement_start_time) = 0;  // Reset start time
          }
  
  - id: motor_start
    then:
      - output.set_level:
          id: motor_enable
          level: !lambda "return (id(motor_speed).state / 100.0);"